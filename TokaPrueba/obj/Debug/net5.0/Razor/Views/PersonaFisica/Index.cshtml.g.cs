#pragma checksum "D:\TokaPrueba\TokaPrueba\Views\PersonaFisica\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "951db9331b7fae6ad72397e0a266f2ac68e90345"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_PersonaFisica_Index), @"mvc.1.0.view", @"/Views/PersonaFisica/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\TokaPrueba\TokaPrueba\Views\_ViewImports.cshtml"
using TokaPrueba;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\TokaPrueba\TokaPrueba\Views\_ViewImports.cshtml"
using TokaPrueba.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"951db9331b7fae6ad72397e0a266f2ac68e90345", @"/Views/PersonaFisica/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"b92ae929044e15c0a4f04659f4e35bfd4f903557", @"/Views/_ViewImports.cshtml")]
    public class Views_PersonaFisica_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "D:\TokaPrueba\TokaPrueba\Views\PersonaFisica\Index.cshtml"
  
    ViewData["Title"] = "Persona Fisica";


#line default
#line hidden
#nullable disable
            WriteLiteral(@"

<div class=""container"">
    <br />
    <div class=""row""><h1>Personas Físicas</h1></div>
    <div class=""row"">
        <div class=""col-5 float-right"">
            <a href=""/PersonaFisica/Create"" class=""btn btn-info"">Agregar Nueva Persona</a>
        </div>
        <div class=""col-5 float-right"">
            <a href=""/PersonaFisica/ExportExcel"" target=""_blank"" class=""btn btn-info"">Exportar Excel</a>
        </div>
    </div>
    <div class=""row""></div>
    <div style=""width:90%; margin:0 auto;"">
        <table id=""myTable"" class=""table table-striped table-bordered dt-responsive nowrap"" width=""100%"" cellspacing=""0"">
            <thead>

            </thead>
            <tbody>
            </tbody>
        </table>
    </div>
</div>


<script type=""text/javascript"" src=""https://cdnjs.cloudflare.com/ajax/libs/datepicker/0.6.5/datepicker.js""></script>
<script type=""text/javascript"" src=""https://cdn.datatables.net/v/dt/dt-1.11.5/datatables.min.js""></script>
<script src=""https://cdn.jsde");
            WriteLiteral("livr.net/npm/jquery-validation@1.19.3/dist/jquery.validate.js\"></script>\r\n<script>\r\n    $(document).ready(function () {\r\n\r\n        loadData()\r\n\r\n    });\r\n    function loadData() {\r\n        $.ajax({\r\n            url: \'");
#nullable restore
#line 42 "D:\TokaPrueba\TokaPrueba\Views\PersonaFisica\Index.cshtml"
             Write(Url.Action("GetPersonasFisica", "PersonaFisica"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
            type: ""POST"",
            dataType: 'json',
            success: function (data) {

                assignToEventsColumns(data);
            }
            });
        }
        function assignToEventsColumns(data) {
            var table = $('#myTable').dataTable({
                ""bAutoWidth"": false,
                ""aaData"": data.data,
                ""language"": {
                    ""url"": ""//cdn.datatables.net/plug-ins/1.10.15/i18n/Spanish.json""
                },
                ""initComplete"": function () {
                    $('.buttons-execel').html('<span class=""glyphicon glyphicon-file"" data-toggle=""tooltip"" title=""Export To Excel""/>')
                },
                ""columns"": [{
                    ""sTitle"": ""Número de Usuario"",
                    ""data"": ""idPersonaFisica""
                }, {
                        ""sTitle"": ""Apellido Materno"",
                        ""data"": ""apellidoPaterno""
                    }, {
                        ""sTitle");
            WriteLiteral(@""": ""Apellido Paterno"",
                        ""data"": ""apellidoMaterno""
                    }, {
                        ""sTitle"": ""Fecha de Nacimiento"",
                        ""data"": ""fechaNacimiento""
                    }, {
                        ""sTitle"": ""RFC"",
                        ""data"": ""rfc""
                    }, {
                        ""sTitle"": ""Eliminar"",
                        ""data"": null, ""render"": function (data, type, row) {
                            return ""<a href='#' class='btn btn-danger' onclick=DeleteData('"" + row.idPersonaFisica + ""'); >Eliminar</span></a>"";
                      }
                    }, {
                        ""sTitle"": ""Editar"",
                        ""data"": null, ""render"": function (data, type, row) {
                            return '<a class=""btn btn-info"" href=""/PersonaFisica/Edit/' + row.idPersonaFisica + '"">Editar</a>';
                        }
                    },

                ]
            })

    }
    
    ");
            WriteLiteral(@"function DeleteData(id) {

        Swal
            .fire({
                title: ""Esta seguro de realizar operación"",
                text: ""¿Eliminar?"",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: ""Sí, eliminar"",
                cancelButtonText: ""Cancelar"",
            })
            .then(resultado => {
                if (resultado.value) {
                    $.ajax({
                        type: ""POST"",
                        url: ""DeletePersonaFisica?id="" + id,
                        async: false,
                        dataType: ""json"",
                        traditional: true,
                        contentType: 'application/json; charset=utf-8',
                        success: function (response) {
                            success(response.status,response.success)
                            if (response.status == true) {
                                $('#myTable').dataTable().fnDestroy();
         ");
            WriteLiteral("                       loadData()\r\n                            }\r\n                        }\r\n                    });\r\n                } else {\r\n\r\n                    return false;\r\n                }\r\n            });\r\n    }\r\n\r\n</script>\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
